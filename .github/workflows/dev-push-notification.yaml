name: Deploy to Dev Environment

on:
  push:
    branches:
      - dev

env:
  DOCKER_REGISTRY: ${{ secrets.NCP_CONTAINER_REGISTRY }}
  SPRING_APP_NAME: libri-api
  SPRING_APP_VERSION: ${{ github.sha }}

permissions:
  contents: read
  packages: write


jobs:
  build-and-push:
    name: Build and Push Spring Boot Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: Build and push Spring Boot Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.SPRING_APP_NAME }}:${{ env.SPRING_APP_VERSION }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.SPRING_APP_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Dev Server
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment directory
        run: |
          mkdir -p deploy
          cp docker-compose.yml deploy/
          cp -r initdb deploy/

      - name: Create .env file
        run: |
          cat << EOF > deploy/.env
          # Docker Registry
          DOCKER_REGISTRY=${{ secrets.NCP_CONTAINER_REGISTRY }}
          SPRING_APP_NAME=${{ env.SPRING_APP_NAME }}
          
          # MySQL ÌôòÍ≤ΩÎ≥ÄÏàò
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_READ_USER=${{ secrets.MYSQL_READ_USER }}
          MYSQL_READ_PASSWORD=${{ secrets.MYSQL_READ_PASSWORD }}
          
          # Spring Boot ÌôòÍ≤ΩÎ≥ÄÏàò
          SPRING_PROFILES_ACTIVE=dev
          SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/${{ secrets.MYSQL_DATABASE }}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
          SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USER }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          
          # JVM ÏòµÏÖò
          JAVA_OPTS=-XX:+UseZGC -XX:+ZGenerational -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Dfile.encoding=UTF-8 -Djava.security.egd=file:/dev/./urandom
          EOF

      - name: Update docker-compose.yml with new image tag
        run: |
          sed -i "s|image: \${DOCKER_REGISTRY}/\${SPRING_APP_NAME}:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.SPRING_APP_NAME }}:${{ env.SPRING_APP_VERSION }}|g" deploy/docker-compose.yml

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          source: "deploy/*"
          target: "/app/libri"
          strip_components: 1
          overwrite: true

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          script: |
            # Î∞∞Ìè¨ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
            cd /app/libri
            
            # NCP Container Registry Î°úÍ∑∏Ïù∏
            echo "${{ secrets.NCP_ACCESS_KEY }}" | docker login ${{ secrets.NCP_CONTAINER_REGISTRY }} -u "${{ secrets.NCP_ACCESS_KEY }}" --password-stdin
            
            # Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Î∞±ÏóÖ (Ïò§Î•ò Î∞úÏÉù Ïãú Î°§Î∞±Ïö©)
            docker-compose -f docker-compose.yml ps -q > previous_containers.txt
            
            # ÏÉà Ïù¥ÎØ∏ÏßÄ ÌíÄ
            docker-compose pull
            
            # Ïª®ÌÖåÏù¥ÎÑà Ïû¨ÏãúÏûë
            docker-compose down --remove-orphans
            docker-compose up -d
            
            # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ìó¨Ïä§Ï≤¥ÌÅ¨
            echo "Waiting for containers to be healthy..."
            sleep 30
            
            # Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìñâ
            if docker-compose ps | grep -q "unhealthy"; then
              echo "Container health check failed. Rolling back..."
              docker-compose down
              # Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Î≥µÍµ¨
              while read container; do
                docker start $container
              done < previous_containers.txt
              exit 1
            else
              echo "Deployment successful!"
              # Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Î™©Î°ù ÏÇ≠Ï†ú
              rm previous_containers.txt
              # ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
              docker image prune -af
            fi

      - name: Verify Deployment
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          script: |
            cd /app/libri
            echo "Checking container status..."
            docker-compose ps
            echo "Checking application logs..."
            docker-compose logs --tail=100 api

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment completed successfully!"
          else
            echo "Deployment failed!"
            exit 1
          fi

      - name: Send Slack Notification on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,eventName
          custom_payload: |
            {
              attachments: [{
                color: 'good',
                title: '‚úÖ Î∞∞Ìè¨ ÏÑ±Í≥µ',
                text: `*Repository:* ${process.env.AS_REPO}\n*Branch:* dev\n*Ïª§Î∞ã:* ${process.env.AS_COMMIT}\n*ÏûëÏÑ±Ïûê:* ${process.env.AS_AUTHOR}\n\nÎ∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üéâ`,
                footer: new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Send Slack Notification on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,eventName
          custom_payload: |
            {
              attachments: [{
                color: 'danger',
                title: '‚ùå Î∞∞Ìè¨ Ïã§Ìå®',
                text: `*Repository:* ${process.env.AS_REPO}\n*Branch:* dev\n*Ïª§Î∞ã:* ${process.env.AS_COMMIT}\n*ÏûëÏÑ±Ïûê:* ${process.env.AS_AUTHOR}\n\n‚ö†Ô∏è Î∞∞Ìè¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\nÌôïÏù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§!`,
                footer: new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

