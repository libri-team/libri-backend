import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.4'
    //id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'com.epages.restdocs-api-spec' version '0.17.1'
    id 'org.hidetake.swagger.generator' version '2.18.2'

}

ext {
    queryDslVersion = "5.0.0"
    springCloudVersion = "2024.0.0"
    restdocsApiSpecVersion = '0.17.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

swaggerSources {
    sample {
        setInputFile(file("${buildDir}/api-spec/openapi3.yaml"))
    }
}
openapi3 {
    servers = [
            { url = "http://localhost:8081" }
    ]
    title = "API 문서"
    description = "RestDocsWithSwagger Docs"
    version = "0.0.1"
    format = "yaml"
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // Starter dependencies
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server:3.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring Cloud dependencies
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Web Client
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    swaggerUI 'org.webjars:swagger-ui:4.11.1'

    // Lombok dependencies
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Hibernate Envers and Hibernate Core
    implementation 'org.springframework.data:spring-data-envers'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.6.0'
    implementation 'org.hibernate:hibernate-core:6.0.0.Final'
    implementation 'org.hibernate:hibernate-envers:6.0.0.Final' // Hibernate Envers 버전 일치

    // QueryDSL dependencies
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Other dependencies
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'
    implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'com.h2database:h2'

    // Testcontainers dependencies
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 파싱을 위해 필요

    //google 3rd party
    implementation 'com.google.api-client:google-api-client:1.32.1'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.32.1'
    implementation 'com.google.http-client:google-http-client-gson:1.32.1'
    //jackson
    implementation 'com.google.http-client:google-http-client-jackson2:1.42.3'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'openapi3'  // 테스트 실행 후 openapi3 태스크를 실행하여 스펙 생성
}

tasks.withType(org.hidetake.gradle.swagger.generator.GenerateSwaggerUI) {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")
        if (!swaggerUIFile.exists()) {
            throw new GradleException("openapi3.yaml 파일을 찾을 수 없습니다: ${swaggerUIFile}")
        }

        // YAML 파일을 읽어서 Map으로 변환합니다.
        Yaml yaml = new Yaml()
        Map spec = yaml.load(swaggerUIFile.text)

        // components 섹션이 없으면 생성합니다.
        if (!spec.containsKey("components") || spec.components == null) {
            spec.components = [:]
        }
        def components = spec.components

        // securitySchemes가 없으면 생성하고, BearerAuth 스키마를 추가합니다.
        components.securitySchemes = components.securitySchemes ?: [:]
        components.securitySchemes.BearerAuth = [
                type         : "http",
                scheme       : "bearer",
                bearerFormat : "JWT"
        ]

        // 전역 security 요구사항 설정: 모든 API 호출 시 BearerAuth를 요구하도록 함.
        spec.security = [
                [ "BearerAuth": [] ]
        ]

        // YAML 덤프 옵션을 BLOCK 스타일로 설정합니다.
        DumperOptions options = new DumperOptions()
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)
        Yaml dumper = new Yaml(options)
        String newYaml = dumper.dump(spec)

        // 기존 파일을 덮어씁니다.
        swaggerUIFile.text = newYaml

        println "JWT 보안 스키마가 components 섹션과 병합되어 추가되었습니다."
    }
}



// 생성된 Swagger UI 파일을 static/docs 폴더로 복사하여 BootJar에 포함
bootJar {
    dependsOn generateSwaggerUISample
    from("${buildDir}/swagger-ui-sample") {
        into 'static/docs'
    }
}


